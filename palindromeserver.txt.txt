#include<stdio.h>
#include<string.h>
#include<sys/socket.h>
#include<arpa/inet.h>
#include<unistd.h>
 
int main(int argc , char *argv[])
{
    int socket_desc , client_sock , c ;
    struct sockaddr_in server , client;
    char client_message[2000],*buffer;
    int i,j,l=1,flag=1;
    
    socket_desc = socket(AF_INET , SOCK_STREAM , 0);
    if (socket_desc == -1)
    {
        printf("Could not create socket\n");
        return 1;
    }
    puts("Socket created\n");
     
    
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = INADDR_ANY;
    server.sin_port = htons( 8888 );
     
    
    if( bind(socket_desc,(struct sockaddr *)&server , sizeof(server)) < 0)
    {
        
        perror("bind failed. Error\n");
        return 1;
    }
    puts("bind done");
    listen(socket_desc , 3);
       
    c = sizeof(struct sockaddr_in);
    client_sock = accept(socket_desc, (struct sockaddr *)&client, (socklen_t*)&c);
    if (client_sock < 0)
    {
        perror("accept failed");
        return 1;
    }
    puts("Connection accepted");
     
    if( recv(client_sock , client_message , 2000 , 0) < 0 )
    {
        
       printf("not recv\n");
       return 1;
    }
      
    l=strlen(client_message);
    for(i=0,j=l-1;client_message[i]!='\0';i++,j--)
    {
        if(client_message[i]!=client_message[j])
        {
            buffer="NO";
            flag=0;
            write(client_sock , buffer , strlen(buffer));
            break;
        }
    }
    if(flag==1)
    {
        buffer="Yes";
        write(client_sock , buffer , strlen(buffer));
    }
    close(client_sock); 
    close(socket_desc);
    return 0;
}